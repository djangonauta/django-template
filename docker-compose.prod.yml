services:
  redis:
    image: redis:7.4.0
    container_name: redis
    volumes:
      - /var/lib/docker/volumes/redis:/data
    expose:
      - 6379

  postgres:
    image: postgres:16.4
    container_name: postgres
    env_file:
      - ./docker/docker.env
    volumes:
      - ./docker/postgres/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
      - /var/lib/docker/volumes/postgresql:/var/lib/postgresql/data
    expose:
      - 5432

  rabbitmq:
    image: rabbitmq:3.13.6
    container_name: rabbitmq
    env_file:
      - ./docker/docker.env
    volumes:
      - /var/lib/docker/volumes/rabbitmq:/var/lib/rabbitmq
    expose:
      - 5672
      - 15672
    healthcheck:
      test: [ 'CMD', 'rabbitmqctl', 'status']
      interval: 5s
      timeout: 100s
      retries: 19

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: celery-worker
    env_file:
      - ./docker/docker.env
    environment:
      - POETRY_VIRTUALENVS_PATH=/usr/envs
    volumes:
      - .:/usr/app
      - /usr/envs
    depends_on:
      rabbitmq:
        condition: service_healthy
    entrypoint: ./docker/celery/celery.prod.py

  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: app
    env_file:
      - ./docker/docker.env
    environment:
      - POETRY_VIRTUALENVS_PATH=/usr/envs
    volumes:
      - .:/usr/app
      - /usr/envs
      - static_volume:/usr/app/assets
    expose:
      - 8000
    depends_on:
      rabbitmq:
        condition: service_healthy
    entrypoint: ./docker/app/prod.py

  nginx:
    build: ./nginx
    container_name: nginx
    volumes:
      - static_volume:/usr/app/assets
    ports:
      - 80:80
      - 443:443
    depends_on:
      - app

volumes:
  static_volume: